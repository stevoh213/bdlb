import { createClient, SupabaseClient } from 'npm:@supabase/supabase-js@^2';
import { v4 as uuidv4 } from 'npm:uuid@^9';
import { serve } from 'https://deno.land/std@0.177.0/http/server.ts'; // Using a specific version for stability

// Relative path to the shared service.
// This assumes voice-log-upload is a directory directly under functions/
// and _shared is another directory directly under functions/.
import { VoiceLogExtractionService, VoiceLogExtractionResult } from '../_shared/services/VoiceLogExtractionService.ts';
// OPENROUTER_CONFIG is used by VoiceLogExtractionService internally.
// No need to import OPENROUTER_CONFIG here unless directly used by this function.

const CORS_HEADERS = {
  'Access-Control-Allow-Origin': '*', // Permissive for now
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-supabase-url, x-supabase-anon-key',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

// Define a simple type for the expected database row, matching schema.sql
interface VoiceLogPreview {
  id?: string; // UUID, generated by DB
  user_id: string;
  original_audio_filename: string;
  storage_path: string;
  transcript_text: string;
  extracted_data_json?: VoiceLogExtractionResult;
  status: 'processing' | 'pending_review' | 'processing_failed' | 'confirmed' | 'archived'; // Extended from initial 'processing'
  error_message?: string;
  created_at?: string; // TIMESTAMPTZ
  updated_at?: string; // TIMESTAMPTZ
}


serve(async (req: Request) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: CORS_HEADERS });
  }

  let supabaseClient: SupabaseClient;
  let voiceLogPreviewId: string | null = null;

  try {
    const authorization = req.headers.get('Authorization');
    if (!authorization) {
      throw new Error('Missing Authorization header');
    }

    // Create Supabase client with the user's context
    // Deno Deploy (where Supabase Edge Functions run) requires env vars for Supabase URL and Anon Key
    // These are typically available as SUPABASE_URL and SUPABASE_ANON_KEY
    const supabaseUrl = Deno.env.get('SUPABASE_URL') ?? req.headers.get('X-Supabase-Url');
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY') ?? req.headers.get('X-Supabase-Anon-Key');

    if (!supabaseUrl || !supabaseAnonKey) {
        console.error('Supabase URL or Anon Key is missing.');
        return new Response(JSON.stringify({ error: 'Server configuration error: Supabase credentials missing.' }), {
            status: 500,
            headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
        });
    }

    supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {
      global: { headers: { Authorization: authorization } },
    });

    const { data: { user }, error: userError } = await supabaseClient.auth.getUser();

    if (userError || !user) {
      console.error('User auth error:', userError);
      return new Response(JSON.stringify({ error: 'Unauthorized: ' + (userError?.message || 'User not found') }), {
        status: 401,
        headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
      });
    }

    if (req.method !== 'POST') {
      return new Response(JSON.stringify({ error: 'Method not allowed. Only POST is accepted.' }), {
        status: 405,
        headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
      });
    }

    const formData = await req.formData();
    const audioFile = formData.get('audio_file') as File | null;
    const originalAudioFilename = formData.get('original_audio_filename') as string | null;
    const transcriptText = formData.get('transcript_text') as string | null;

    if (!audioFile || !originalAudioFilename || !transcriptText) {
      return new Response(JSON.stringify({ error: 'Missing required form fields: audio_file, original_audio_filename, transcript_text' }), {
        status: 400,
        headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
      });
    }

    // 5. File Upload to Supabase Storage
    const uniqueFilename = `${uuidv4()}_${originalAudioFilename}`;
    const storagePath = `voice_uploads/${user.id}/${uniqueFilename}`;

    const { error: uploadError } = await supabaseClient.storage
      .from('voice_uploads') // Ensure this bucket exists and RLS is set up
      .upload(storagePath, audioFile, {
        contentType: audioFile.type || 'audio/mpeg', // Default or derive
        upsert: false, // Do not overwrite if somehow path collides
      });

    if (uploadError) {
      console.error('Storage upload error:', uploadError);
      throw new Error(`Failed to upload audio file: ${uploadError.message}`);
    }

    // 6. Create Initial `voice_log_previews` Record
    const initialPreviewData: Omit<VoiceLogPreview, 'id' | 'created_at' | 'updated_at' | 'extracted_data_json' | 'error_message'> = {
      user_id: user.id,
      original_audio_filename: originalAudioFilename,
      storage_path: storagePath,
      transcript_text: transcriptText,
      status: 'processing',
    };

    const { data: newPreview, error: insertError } = await supabaseClient
      .from('voice_log_previews')
      .insert(initialPreviewData)
      .select('id')
      .single();

    if (insertError || !newPreview) {
      console.error('DB insert error:', insertError);
      throw new Error(`Failed to create voice log preview record: ${insertError?.message}`);
    }
    voiceLogPreviewId = newPreview.id;

    // 7. AI Data Extraction
    // The VoiceLogExtractionService uses OPENROUTER_CONFIG.defaultApiKey internally
    // Ensure OPENROUTER_CONFIG.defaultApiKey has a valid key.
    // For Deno Deploy, API keys should be set as environment variables.
    // VoiceLogExtractionService will try to use OPENROUTER_CONFIG.defaultApiKey.
    // If that key needs to be sourced from Deno.env.get('OPENROUTER_API_KEY') within the edge function,
    // then VoiceLogExtractionService would need to be modified or key passed to constructor.
    // Assuming VoiceLogExtractionService's OPENROUTER_CONFIG has the key.
    const extractionService = new VoiceLogExtractionService();
    let extractedData: VoiceLogExtractionResult | null = null;
    let extractionError: Error | null = null;

    try {
        extractedData = await extractionService.extractDataFromTranscript(transcriptText);
    } catch (err) {
        console.error("AI Extraction Error:", err);
        extractionError = err instanceof Error ? err : new Error(String(err));
    }

    // 8. Update `voice_log_previews` Record
    if (extractionError) {
      const { error: updateError } = await supabaseClient
        .from('voice_log_previews')
        .update({
          status: 'processing_failed',
          error_message: extractionError.message,
        })
        .eq('id', voiceLogPreviewId);
      if (updateError) console.error("Error updating preview to failed status:", updateError); // Log but proceed to respond

      return new Response(JSON.stringify({
        message: 'File uploaded but AI processing failed.',
        voice_log_preview_id: voiceLogPreviewId,
        status: 'processing_failed',
        error: extractionError.message
      }), {
        status: 500, // Or 207 Multi-Status if part succeeded
        headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
      });

    } else if (extractedData) {
      const { data: updatedPreview, error: updateSuccessError } = await supabaseClient
        .from('voice_log_previews')
        .update({
          extracted_data_json: extractedData,
          status: 'pending_review',
          error_message: null, // Clear any previous error
        })
        .eq('id', voiceLogPreviewId)
        .select()
        .single();

      if (updateSuccessError) {
        console.error("Error updating preview to success status:", updateSuccessError);
        // Even if this update fails, the core task (upload + extraction) might have succeeded.
        // Decide how to handle this - for now, we'll report an error but include data if available.
         throw new Error(`Failed to update voice log preview with extracted data: ${updateSuccessError.message}`);
      }

      return new Response(JSON.stringify({
        message: 'File uploaded and processed successfully.',
        data: updatedPreview, // Return the full updated record
      }), {
        status: 200,
        headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
      });
    } else {
        // Should not happen if extractionError is null and extractedData is null
        throw new Error("Unknown state after AI extraction: no data and no error.");
    }

  } catch (e) {
    const error = e instanceof Error ? e : new Error(String(e));
    console.error('Overall error in Edge Function:', error.message, error.stack);

    // If a preview record was created, try to mark it as failed.
    if (voiceLogPreviewId && supabaseClient) {
        try {
            await supabaseClient
            .from('voice_log_previews')
            .update({ status: 'processing_failed', error_message: `Edge function error: ${error.message}` })
            .eq('id', voiceLogPreviewId);
        } catch (updateErr) {
            console.error("Failed to update preview record to error state during cleanup:", updateErr);
        }
    }


    let statusCode = 500;
    if (error.message.includes('Unauthorized') || error.message.includes('Missing Authorization')) statusCode = 401;
    if (error.message.includes('Missing required form fields')) statusCode = 400;
    if (error.message.includes('Method not allowed')) statusCode = 405;

    return new Response(JSON.stringify({ error: error.message, voice_log_preview_id: voiceLogPreviewId }), {
      status: statusCode,
      headers: { ...CORS_HEADERS, 'Content-Type': 'application/json' },
    });
  }
});
